# 141. Linked List Cycle

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {

        ListNode* slowptr=head;
        ListNode* fastptr=head;

        while(head!=NULL && fastptr!=NULL && fastptr->next!=NULL && fastptr->next->next!=NULL)
        {
          fastptr=fastptr->next->next;
          slowptr=slowptr->next;
            
            if(fastptr==slowptr)
            {
                return true;
            }
        }

        return false;
        
    }
};